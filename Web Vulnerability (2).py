import requests
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors


# --- Main Scanner Class ---
class VulnerabilityScanner:
    def __init__(self, base_url):
        self.base_url = base_url
        self.domain = urlparse(base_url).netloc.replace(".", "_")  # Domain-based file naming
        self.discovered_urls = []
        self.vulnerability_results = []

    def scan_website(self):
        # Step 1: Discover URLs
        self.discovered_urls = self.discover_urls()
        print(f"Discovered {len(self.discovered_urls)} URLs on {self.base_url}:\n")
        for i, url in enumerate(self.discovered_urls, start=1):
            print(f"{i}. {url}")

        # Step 2: Scan discovered URLs for vulnerabilities
        for url in self.discovered_urls:
            vulnerabilities = self.scan_url(url)
            if vulnerabilities:
                print(f"\nVulnerabilities found on {url}:")
                for vuln, details in vulnerabilities.items():
                    print(f"\nVulnerability: {vuln}")
                    print(f"Details: {details['description']}")
                    print(f"Severity: {details['severity']}")
                self.vulnerability_results.append({"url": url, "vulnerabilities": vulnerabilities})

        # Step 3: Generate Reports
        self.generate_html_report()
        self.generate_pdf_report()

    def discover_urls(self):
        print("\n--- Discovering URLs ---")
        urls = set()
        try:
            response = requests.get(self.base_url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                for anchor in soup.find_all("a"):
                    href = anchor.get("href")
                    if href:
                        absolute_url = urljoin(self.base_url, href)
                        urls.add(absolute_url)
        except Exception as e:
            print(f"Error discovering URLs: {e}")
        return list(urls)

    def scan_url(self, url):
        vulnerabilities = {}
        print(f"\n--- Scanning {url} ---")

        # SQL Injection Check
        if self.is_sql_injection_vulnerable(url):
            vulnerabilities["SQL Injection"] = {
                "description": "Potential SQL injection vulnerability detected.",
                "severity": "High",
                "suggestions": "Sanitize and validate user inputs, use prepared statements.",
            }

        # XSS Check
        if self.is_xss_vulnerable(url):
            vulnerabilities["Cross-Site Scripting (XSS)"] = {
                "description": "Potential XSS vulnerability detected.",
                "severity": "Medium",
                "suggestions": "Escape HTML outputs, use Content Security Policy (CSP).",
            }

        # Insecure Configuration Check
        if self.has_insecure_configuration(url):
            vulnerabilities["Insecure Configuration"] = {
                "description": "Site is not using HTTPS.",
                "severity": "Low",
                "suggestions": "Use HTTPS to secure communications.",
            }

        return vulnerabilities

    def is_sql_injection_vulnerable(self, url):
        payload = "' OR '1'='1"
        try:
            response = requests.get(f"{url}?id={payload}")
            if re.search(r"error|warning", response.text, re.IGNORECASE):
                return True
        except Exception:
            pass
        return False

    def is_xss_vulnerable(self, url):
        payload = "<script>alert('XSS')</script>"
        try:
            response = requests.get(f"{url}?input={payload}")
            if payload in response.text:
                return True
        except Exception:
            pass
        return False

    def has_insecure_configuration(self, url):
        return not url.startswith("https")

    def generate_html_report(self):
        print("\n--- Generating HTML Report ---")
        file_name = f"{self.domain}_vulnerability_report.html"
        with open(file_name, "w") as file:
            file.write("<html><head><title>Vulnerability Report</title>")
            file.write("<style>")
            file.write("body {font-family: Arial, sans-serif;}")
            file.write("table {border-collapse: collapse; width: 100%; margin: 20px 0;}")
            file.write("th, td {border: 1px solid #ddd; padding: 8px; text-align: left;}")
            file.write("th {background-color: #f2f2f2;}")
            file.write("tr:nth-child(even) {background-color: #f9f9f9;}")
            file.write("</style></head><body>")
            file.write(f"<h1>Vulnerability Report for {self.base_url}</h1>")

            if not self.vulnerability_results:
                file.write("<p>No vulnerabilities found.</p>")
            else:
                for result in self.vulnerability_results:
                    file.write(f"<h2>URL: {result['url']}</h2>")
                    file.write("<table>")
                    file.write("<tr><th>Vulnerability</th><th>Severity</th><th>Description</th><th>Suggestions</th></tr>")
                    for vuln, details in result["vulnerabilities"].items():
                        file.write(f"<tr><td>{vuln}</td>")
                        file.write(f"<td>{details['severity']}</td>")
                        file.write(f"<td>{details['description']}</td>")
                        file.write(f"<td>{details['suggestions']}</td></tr>")
                    file.write("</table>")
            file.write("</body></html>")
        print(f"HTML report saved as {file_name}")
        print(f"Open the report in your browser: file://{file_name}")

    def generate_pdf_report(self):
        print("\n--- Generating PDF Report ---")
        file_name = f"{self.domain}_vulnerability_report.pdf"
        doc = SimpleDocTemplate(file_name)
        styles = getSampleStyleSheet()
        elements = []

        # Title
        elements.append(Paragraph("Vulnerability Scan Report", styles["Title"]))
        elements.append(Paragraph(f"Target: {self.base_url}", styles["Normal"]))
        elements.append(Spacer(1, 12))

        # Vulnerabilities Table
        data = [["URL", "Vulnerability", "Severity", "Description", "Suggestions"]]
        for result in self.vulnerability_results:
            url = result["url"]
            for vuln, details in result["vulnerabilities"].items():
                data.append([
                    url, vuln, details["severity"], details["description"], details["suggestions"]
                ])

        # Style table
        table = Table(data)
        table.setStyle([
            ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
            ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("GRID", (0, 0), (-1, -1), 1, colors.black),
        ])
        elements.append(table)

        doc.build(elements)
        print(f"PDF report saved as {file_name}")


# --- Entry Point ---
if __name__ == "__main__":
    # User input for target URL
    target_url = input("Enter the target URL to scan: ").strip()
    if not target_url:
        print("No URL provided. Exiting.")
    else:
        scanner = VulnerabilityScanner(target_url)
        scanner.scan_website()

    

